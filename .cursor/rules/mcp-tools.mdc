---
description: MCP Server Tools - Project Management and Development Assistance
globs: ["**/*"]
alwaysApply: true
---




# MCP Server Tools

## 🎯 Available Tools

This project has access to MCP server tools for enhanced project management and AI assistance.

### 📋 Goals Management

- `mcp_mcp-server-go_goals_list()` - List active project goals
- `mcp_mcp-server-go_goals_add({title: "Goal Title"})` - Add new goal
- `mcp_mcp-server-go_goals_update({id: 1, status: "done"})` - Update goal status

### 📝 Cursor Rules Management

- `mcp_mcp-server-go_cursor_rules_list()` - List active cursor rules
- `mcp_mcp-server-go_cursor_rules_add({name: "Rule Name", category: "general", content: "Rule content"})` - Add new rule
- `mcp_mcp-server-go_cursor_rules_update({id: 1, content: "Updated content"})` - Update existing rule
- `mcp_mcp-server-go_cursor_rules_delete({id: 1})` - Delete rule
- `mcp_mcp-server-go_cursor_rules_suggest({category: "general"})` - Suggest community rules
- `mcp_mcp-server-go_cursor_rules_install({rule_name: "rule-name"})` - Install rule from community

### 📚 Documentation & ADRs

- `mcp_mcp-server-go_adrs_list()` - List Architecture Decision Records
- `mcp_mcp-server-go_adrs_get({id: "ADR-001"})` - Get specific ADR content
- `mcp_mcp-server-go_template_list()` - List available documentation templates
- `mcp_mcp-server-go_template_register({id: "template-id", name: "Template Name", category: "docs", content: "Template content"})` - Register new template
- `mcp_mcp-server-go_template_get({id: "template-id"})` - Get template details
- `mcp_mcp-server-go_template_update({id: "template-id", content: "Updated content"})` - Update existing template
- `mcp_mcp-server-go_template_delete({id: "template-id"})` - Delete template
- `mcp_mcp-server-go_template_apply({template_id: "template-name", variables: {}})` - Apply template

### 🔍 Repository Tools

- `mcp_mcp-server-go_repo_search({q: "search pattern"})` - Search codebase
- `mcp_mcp-server-go_markdown_lint({path: "docs/"})` - Lint markdown files
- `mcp_mcp-server-go_state_log_change({summary: "Change description", files: ["file1.go"]})` - Log changes
- `mcp_mcp-server-go_changelog_generate({format: "markdown"})` - Generate changelog file

### 🧪 CI & Testing

- `mcp_mcp-server-go_ci_run_tests({scope: "./cmd"})` - Run tests
- `mcp_mcp-server-go_ci_last_failure()` - Get last test failure info

### 🛠️ Preferred Tools Management

- `mcp_mcp-server-go_preferred_tools_list()` - List preferred tools by category/language
- `mcp_mcp-server-go_preferred_tools_add({name: "Tool Name", category: "category"})` - Add preferred tool
- `mcp_mcp-server-go_preferred_tools_update({id: 1, name: "Updated Name"})` - Update preferred tool
- `mcp_mcp-server-go_preferred_tools_delete({id: 1})` - Delete preferred tool

### ⚙️ Setup & Utilities

- `mcp_mcp-server-go_setup_mcp_tools({project_path: "/path/to/project"})` - Set up MCP tools for a project
- `mcp_mcp-server-go_log_parse({file_path: "path/to/log"})` - Parse and analyze log files

## 🚀 Getting Started

### 1. Initialize Project Data

First, add initial project data:

```javascript
// Add initial project goal
mcp_mcp-server-go_goals_add({
  title: "Project Setup Complete"
})

// Add project guidelines rule
mcp_mcp-server-go_cursor_rules_add({
  name: "Project Guidelines",
  category: "general",
  content: "Your project guidelines here..."
})

// Verify tools work
mcp_mcp-server-go_goals_list()
mcp_mcp-server-go_cursor_rules_list()
```

### 2. Use Tools Regularly

- Track project goals and milestones
- Maintain development rules and guidelines
- Document architecture decisions
- Log significant changes

## ⚠️ Important Notes

- **Always initialize with test data** before using list operations
- **Use required parameters only** initially (avoid optional parameters)
- **Restart Cursor** if tools show "Not connected" errors
- **Check troubleshooting guide** if tools fail

## 🔧 Troubleshooting

If tools don't work:

- Check if MCP server is configured in Cursor settings
- Restart Cursor completely
- Verify database exists: `.agent/state.db`
- Try adding test data first: `mcp_mcp-server-go_goals_add({title: "Test"})`

## 🏗️ Go Project Structure & Testing

### **Standard Go Project Layout**

```treeview
project-root/
├── cmd/                    # Main applications
│   └── app-name/
│       └── main.go
├── internal/              # Private application code
│   ├── package1/
│   │   ├── file.go
│   │   └── file_test.go   # Unit tests
│   └── package2/
├── pkg/                   # Public library code
├── test/                  # Integration tests
├── docs/                  # Documentation
├── go.mod
├── go.sum
└── Makefile
```

### **Testing Conventions**

#### **Unit Tests** (Fast, isolated)

- **Location**: Same directory as source code (`internal/package/file_test.go`)
- **Command**: `go test ./...` (runs all unit tests)
- **Purpose**: Test individual functions/methods

#### **Integration Tests** (End-to-end)

- **Location**: `test/` directory at project root
- **Command**: `go test ./test/...` or `cd test && go test`
- **Purpose**: Test multiple packages together

#### **Test Commands**

```bash
# Unit tests only
go test ./...

# Integration tests only  
cd test && go test

# All tests
make test-all

# With coverage
go test -cover ./...
```

### **Best Practices**

- **Unit tests**: Co-locate with source code (`*_test.go`)
- **Integration tests**: Separate `test/` directory
- **Makefile**: Provide convenient test targets
- **Coverage**: Aim for >80% test coverage
- **Naming**: Use descriptive test names (`TestFunctionName_Scenario`)

## 📚 Documentation

- **Usage Guide**: See mcp-tools-usage.mdc
- **Troubleshooting**: See mcp-tools-troubleshooting.mdc
- **Full Documentation**: /home/thornzero/Repositories/mcp-server-go/docs/

---

**Last Updated**: 2025-09-28

**Status**: Production Ready
